<#@ template language="C#" debug="false" hostspecific="true"#>
<#@ include file="EF.Utility.CS.ttinclude"#><#@
 output extension=".cs"#><#
// Copyright (c) Microsoft Corporation.  All rights reserved.

CodeGenerationTools code = new CodeGenerationTools(this);
MetadataLoader loader = new MetadataLoader(this);
CodeRegion region = new CodeRegion(this, 1);
MetadataTools ef = new MetadataTools(this);

string modelFile = @"CPSS.Data.DataAcess.DataModels\CPSSDataEntity.edmx";
string templateDirectory = Path.GetDirectoryName(Host.TemplateFile);
System.IO.DirectoryInfo directory = new System.IO.DirectoryInfo( Path.GetDirectoryName(Host.TemplateFile));
string inputFile = Path.Combine(directory.Parent.FullName, modelFile);
MetadataWorkspace metadataWorkspace = null;
bool allMetadataLoaded =loader.TryLoadAllMetadata(inputFile, out metadataWorkspace);
EdmItemCollection ItemCollection = (EdmItemCollection)metadataWorkspace.GetItemCollection(DataSpace.CSpace);

string namespaceName = code.VsNamespaceSuggestion();

EntityFrameworkTemplateFileManager fileManager = EntityFrameworkTemplateFileManager.Create(this);
#>
<#
foreach (EntityType entity in ItemCollection.GetItems<EntityType>().OrderBy(e => e.Name))
{
	fileManager.StartNewFile("I" + entity.Name + "DataAccess.generated.cs");
#>
//------------------------------------------------------------------------------
// <auto-generated>
//     此代码是根据模板生成的。
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，则所做更改将丢失。
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.ComponentModel;
using CPSS.Data.DataAcess.DataModels;
using System.Data;

namespace <#=namespaceName#>
{
	/// <summary>
    /// <#=GetEntityName(entity.Name)#>的数据访问层接口
    /// </summary>
	public partial interface I<#=entity.Name#>DataAccess
	{
		/// <summary>
		/// 根据编号获取<#=GetEntityName(entity.Name)#>
		/// </summary>
		<#=GetEntityName(entity.Name)#> Get<#=GetEntityName(entity.Name)#>ById(<#=GetParamString(entity, code)#>);
		
        /// <summary>
        /// 增加数据
        /// </summary>
        /// <param name="data"></param>
		/// <param name="tansaction">事务</param>
        /// <returns></returns>
        int Add(<#=GetEntityName(entity.Name)#> data, IDbTransaction tansaction);

        /// <summary>
        /// 修改数据
        /// </summary>
        /// <param name="data"></param>
		/// <param name="tansaction">事务</param>
        int Update(<#=GetEntityName(entity.Name)#> data, IDbTransaction tansaction);

        /// <summary>
        /// 删除数据
        /// </summary>
        /// <param name="data"></param>
		/// <param name="tansaction">事务</param>
        int Delete(<#=GetEntityName(entity.Name)#> data, IDbTransaction tansaction);
	}

}
<#
	fileManager.EndBlock();
}
#>
<#fileManager.Process();#>

<#+
	private string GetParamString(EntityType type, CodeGenerationTools code)
	{
		StringBuilder result =  new StringBuilder();
		foreach(var member in type.Members)
        {
			if(type.KeyMembers.Any(x=>x.Name == member.Name))
            {
				result.AppendFormat("{0} {1}, ", code.GetTypeName(member.TypeUsage.EdmType), member.Name);
            }
        }
		result.Length = result.Length - 2;
		return result.ToString();
	}

	private string GetEntityName(string name)
    {
		return name+"DataModel";
	}

    
#>
