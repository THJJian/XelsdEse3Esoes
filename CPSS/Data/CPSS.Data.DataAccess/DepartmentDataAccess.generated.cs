//------------------------------------------------------------------------------
// <auto-generated>
//     此代码是根据模板生成的。
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，则所做更改将丢失。
// </auto-generated>
//------------------------------------------------------------------------------
using System.Data;
using System.Data.Common;
using System.Data.SqlClient;
using CPSS.Common.Core.DataAccess.DataAccess;
using CPSS.Data.DataAccess.Interfaces;
using CPSS.Data.DataAcess.DataModels;

namespace CPSS.Data.DataAccess
{
	/// <summary>
    /// Department的数据访问层
    /// </summary>
	public partial class DepartmentDataAccess : GenericDataAccessBase<DepartmentDataModel>, IDepartmentDataAccess
	{
		/// <summary>
		/// 构造函数
		/// </summary>
		public DepartmentDataAccess(IDbConnection connection) : base(connection)
        {
        }

		/// <summary>
		/// 根据编号获取Department
		/// </summary>
		public DepartmentDataModel GetDepartmentDataModelById(int department_Id)
		{
			this.ExecuteSQL = @"SELECT department_Id,class_id,parent_id,child_number,child_count,serial_number,name,comment,deleted,ModifyDate,pinyin,Flag,RowIndex From Department  WHERE  department_Id = @department_Id ";
			this.DataParameter = new DbParameter[]
			{
				new SqlParameter("@department_Id", department_Id),                 
			};
            return this.ExecuteReadSqlToDepartmentDataModel();
		}

		/// <summary>
		/// 新增
		/// </summary>
		public int Add(DepartmentDataModel data, IDbTransaction tansaction)
	    {
            this.ExecuteSQL = @"INSERT INTO [Department] ([class_id],[parent_id],[child_number],[child_count],[serial_number],[name],[comment],[deleted],[ModifyDate],[pinyin],[Flag],[RowIndex]) VALUES (@class_id,@parent_id,@child_number,@child_count,@serial_number,@name,@comment,@deleted,@ModifyDate,@pinyin,@Flag,@RowIndex) 
 SELECT SCOPE_IDENTITY()";
			this.DataParameter = new DbParameter[]
            {
                new SqlParameter("@class_id", data.class_id),                 
                new SqlParameter("@parent_id", data.parent_id),                 
                new SqlParameter("@child_number", data.child_number),                 
                new SqlParameter("@child_count", data.child_count),                 
                new SqlParameter("@serial_number", data.serial_number),                 
                new SqlParameter("@name", data.name),                 
                new SqlParameter("@comment", data.comment),                 
                new SqlParameter("@deleted", data.deleted),                 
                new SqlParameter("@ModifyDate", data.ModifyDate),                 
                new SqlParameter("@pinyin", data.pinyin),                 
                new SqlParameter("@Flag", data.Flag),                 
                new SqlParameter("@RowIndex", data.RowIndex),                 
            };
	        return this.ExecuteNonQuery(tansaction, false);
	    }

		/// <summary>
		/// 新增
		/// </summary>
		public override int Add(DepartmentDataModel data)
	    {
			return this.Add(data, null);
	    }

		/// <summary>
		/// 修改
		/// </summary>
		public int Update(DepartmentDataModel data, IDbTransaction tansaction)
	    {
			this.ExecuteSQL = @"UPDATE Department SET  [class_id] = @class_id, [parent_id] = @parent_id, [child_number] = @child_number, [child_count] = @child_count, [serial_number] = @serial_number, [name] = @name, [comment] = @comment, [deleted] = @deleted, [ModifyDate] = @ModifyDate, [pinyin] = @pinyin, [Flag] = @Flag, [RowIndex] = @RowIndex WHERE  [department_Id] = @department_Id ";
			this.DataParameter = new DbParameter[]
            {
                new SqlParameter("@department_Id", data.department_Id),                 
                new SqlParameter("@class_id", data.class_id),                 
                new SqlParameter("@parent_id", data.parent_id),                 
                new SqlParameter("@child_number", data.child_number),                 
                new SqlParameter("@child_count", data.child_count),                 
                new SqlParameter("@serial_number", data.serial_number),                 
                new SqlParameter("@name", data.name),                 
                new SqlParameter("@comment", data.comment),                 
                new SqlParameter("@deleted", data.deleted),                 
                new SqlParameter("@ModifyDate", data.ModifyDate),                 
                new SqlParameter("@pinyin", data.pinyin),                 
                new SqlParameter("@Flag", data.Flag),                 
                new SqlParameter("@RowIndex", data.RowIndex),                 
            };
	        return this.ExecuteNonQuery(tansaction);
	    }

		/// <summary>
		/// 修改
		/// </summary>
		public override int Update(DepartmentDataModel data)
	    {
			return this.Update(data, null);
	    }

		/// <summary>
		/// 删除
		/// </summary>
	    public int Delete(DepartmentDataModel data, IDbTransaction tansaction)
	    {
			this.ExecuteSQL = @"DELETE FROM Department WHERE  [department_Id] = @department_Id ";
			this.DataParameter = new DbParameter[]
            {
                new SqlParameter("@department_Id", data.department_Id),                 
            };
	        return this.ExecuteNonQuery(tansaction);
	    }

		/// <summary>
		/// 删除
		/// </summary>
	    public override int Delete(DepartmentDataModel data)
	    {
			return this.Delete(data, null);
	    }
	    
	}
}
