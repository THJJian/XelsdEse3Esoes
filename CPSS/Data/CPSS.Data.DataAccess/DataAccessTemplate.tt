<#@ template language="C#" debug="false" hostspecific="true"#>
<#@ include file="EF.Utility.CS.ttinclude"#>
<#@ output extension=".cs"#>
<#
CodeGenerationTools code = new CodeGenerationTools(this);
MetadataLoader loader = new MetadataLoader(this);
CodeRegion region = new CodeRegion(this, 1);
MetadataTools ef = new MetadataTools(this);

string modelFile = @"CPSS.Data.DataAcess.DataModels\CPSSDataEntity.edmx";
string templateDirectory = Path.GetDirectoryName(Host.TemplateFile);
System.IO.DirectoryInfo directory = new System.IO.DirectoryInfo( Path.GetDirectoryName(Host.TemplateFile));
string inputFile = Path.Combine(directory.Parent.FullName, modelFile);
MetadataWorkspace metadataWorkspace = null;
bool allMetadataLoaded =loader.TryLoadAllMetadata(inputFile, out metadataWorkspace);
EdmItemCollection ItemCollection = (EdmItemCollection)metadataWorkspace.GetItemCollection(DataSpace.CSpace);

string namespaceName = code.VsNamespaceSuggestion();

EntityFrameworkTemplateFileManager fileManager = EntityFrameworkTemplateFileManager.Create(this);
#>
<#
foreach (EntityType entity in ItemCollection.GetItems<EntityType>().OrderBy(e => e.Name))
{
	fileManager.StartNewFile(entity.Name + "DataAccess.generated.cs");
	
#>
//------------------------------------------------------------------------------
// <auto-generated>
//     此代码是根据模板生成的。
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，则所做更改将丢失。
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Common;
using System.Data.SqlClient;
using CPSS.Common.Helper.Cached;
using CPSS.Common.Helper.DataAccess;
using CPSS.Data.DataAccess.Interfaces;
using CPSS.Data.DataAcess.DataModels;

namespace <#=namespaceName#>
{
	/// <summary>
    /// <#=entity.Name#>的数据访问层
    /// </summary>
	public partial class <#=entity.Name#>DataAccess : GenericDataAccessBase<<#=GetEntityName(entity.Name)#>>, I<#=entity.Name#>DataAccess
	{
		/// <summary>
		/// 构造函数
		/// </summary>
		public <#=entity.Name#>DataAccess(IDbConnection connection) : base(connection)
        {
        }

		/// <summary>
		/// 根据编号获取<#=entity.Name#>
		/// </summary>
		public <#=GetEntityName(entity.Name)#> Get<#=GetEntityName(entity.Name)#>ById(<#=GetParamString(entity, code)#>)
		{
			this.ExecuteSQL = @"<#=GetSelectString(entity)#>";
			this.DataParameter = new DbParameter[]
			{
<#
				foreach(var member in entity.Members)
				{
					if(!(member.TypeUsage.EdmType is SimpleType))
						continue;
					if(entity.KeyMembers.Any(x=>x.Name == GetPropertyName(member.Name)))
					{
#>
				new SqlParameter("@<#=GetPropertyName(member.Name) #>", <#=GetPropertyName(member.Name) #>),                 
<#
					}
				}
#>			};
            return this.ExecuteReadSqlTo<#=GetEntityName(entity.Name)#>();
		}

		/// <summary>
		/// 新增
		/// </summary>
		public int Add(<#=GetEntityName(entity.Name)#> data, IDbTransaction tansaction)
	    {
            this.ExecuteSQL = @"<#=GetInsertString(entity)#>";
			this.DataParameter = new DbParameter[]
            {
<#
foreach(var member in entity.Members)
{
    if(!(member.TypeUsage.EdmType is SimpleType)) continue;
    if(!GetIsIdentity(member))
    {
#>
                new SqlParameter("@<#=GetPropertyName(member.Name) #>", data.<#=GetPropertyName(member.Name) #>),                 
<#
    }
}
#>
            };
	        return this.ExecuteNonQuery(tansaction, false);
	    }

		/// <summary>
		/// 新增
		/// </summary>
		public override int Add(<#=GetEntityName(entity.Name)#> data)
	    {
			return this.Add(data, null);
	    }

		/// <summary>
		/// 修改
		/// </summary>
		public int Update(<#=GetEntityName(entity.Name)#> data, IDbTransaction tansaction)
	    {
			this.ExecuteSQL = @"<#=GetUpdateString(entity)#>";
			this.DataParameter = new DbParameter[]
            {
<#
foreach(var member in entity.Members)
{
    if(!(member.TypeUsage.EdmType is SimpleType)) continue;
    if(!GetIsIdentity(member) || entity.KeyMembers.Any(x=>x.Name == GetPropertyName(member.Name)))
    {
#>
                new SqlParameter("@<#=GetPropertyName(member.Name) #>", data.<#=GetPropertyName(member.Name) #>),                 
<#
    }
}
#>
            };
	        return this.ExecuteNonQuery(tansaction);
	    }

		/// <summary>
		/// 修改
		/// </summary>
		public override int Update(<#=GetEntityName(entity.Name)#> data)
	    {
			return this.Update(data, null);
	    }

		/// <summary>
		/// 删除
		/// </summary>
	    public int Delete(<#=GetEntityName(entity.Name)#> data, IDbTransaction tansaction)
	    {
			this.ExecuteSQL = @"<#=GetDeleteString(entity)#>";
			this.DataParameter = new DbParameter[]
            {
<#
foreach(var member in entity.Members)
{
	if(!(member.TypeUsage.EdmType is SimpleType)) continue;
	if(entity.KeyMembers.Any(x=>x.Name == GetPropertyName(member.Name)))
    {
#>
                new SqlParameter("@<#=GetPropertyName(member.Name) #>", data.<#=GetPropertyName(member.Name) #>),                 
<#
    }
}
#>
            };
	        return this.ExecuteNonQuery(tansaction);
	    }

		/// <summary>
		/// 删除
		/// </summary>
	    public override int Delete(<#=GetEntityName(entity.Name)#> data)
	    {
			return this.Delete(data, null);
	    }
	    
	}
}
<#
	fileManager.EndBlock();
}
#>
<#fileManager.Process();#>

<#+
	private string GetPropertyName(string name)
	{
		if(name.IndexOf("C_") == 0)
			return name.Substring(1, name.Length - 1);
		return name;
	}

	private string GetEntityName(string name)
	{
		return name+"DataModel";
	}

	private string GetSelectString(EntityType type)
    {   
        StringBuilder result =  new StringBuilder();
        result.Append("SELECT ");
        foreach(var member in type.Members)
        {
			if(!(member.TypeUsage.EdmType is SimpleType))
					continue;
            result.Append(GetPropertyName(member.Name));
            result.Append(",");
        }
        result.Length--;
		result.AppendFormat(" From {0} ", type.Name);
		result.Append(" WHERE ");
		foreach(var member in type.Members)
		{
			if(!(member.TypeUsage.EdmType is SimpleType)) continue;
			if(type.KeyMembers.Any(x=>x.Name == GetPropertyName(member.Name)))
			{
				result.AppendFormat(" {0} = @{1} AND", GetPropertyName(member.Name), GetPropertyName(member.Name));
			}
		}
		result.Length = result.Length - 3;
		return result.ToString();
    }

	private string GetInsertString(EntityType type)
    {   
        StringBuilder result =  new StringBuilder();
        result.Append("INSERT INTO [");
		result.Append(type.Name + "] (");
        foreach(var member in type.Members)
        {
			if(!(member.TypeUsage.EdmType is SimpleType))
					continue;
			if(!GetIsIdentity(member))
            {
				result.AppendFormat("[{0}]", GetPropertyName(member.Name));
				result.Append(",");
            }
        }
        result.Length--;
		result.Append(") VALUES (");
		foreach(var member in type.Members)
        {
			if(!(member.TypeUsage.EdmType is SimpleType))
					continue;
			if(!GetIsIdentity(member))
            {
				result.Append("@" + GetPropertyName(member.Name));
				result.Append(",");
            }
        }
		result.Length--;
		result.AppendLine(") ");
		result.Append(" SELECT SCOPE_IDENTITY()");
		return result.ToString();
    }

	private string GetUpdateString(EntityType type)
    {
		StringBuilder result =  new StringBuilder();
        result.Append("UPDATE ");
		result.Append(type.Name + " SET ");
        foreach(var member in type.Members)
        {
			if(!(member.TypeUsage.EdmType is SimpleType))
					continue;
			if(!(type.KeyMembers.Any(x=>x.Name == GetPropertyName(member.Name)) || GetIsIdentity(member)))
            {
				result.AppendFormat(" [{0}] = {1}", GetPropertyName(member.Name), "@" + GetPropertyName(member.Name));
				result.Append(",");
            }
        }
        result.Length--;
		result.Append(" WHERE ");
		foreach(var member in type.Members)
        {
			if(!(member.TypeUsage.EdmType is SimpleType))
					continue;
			if(type.KeyMembers.Any(x=>x.Name == GetPropertyName(member.Name)))
            {
				result.AppendFormat(" [{0}] = {1}", GetPropertyName(member.Name), "@" + GetPropertyName(member.Name));
				result.Append(" AND");
            }
        }
		result.Length = result.Length - 3;
		return result.ToString();
    }

	private string GetDeleteString(EntityType type)
    {
		StringBuilder result =  new StringBuilder();
        result.Append("DELETE FROM ");
		result.Append(type.Name);
		result.Append(" WHERE ");
		foreach(var member in type.Members)
        {
			if(!(member.TypeUsage.EdmType is SimpleType))
					continue;
			if(type.KeyMembers.Any(x=>x.Name == GetPropertyName(member.Name)))
            {
				result.AppendFormat(" [{0}] = {1}", GetPropertyName(member.Name), "@" + GetPropertyName(member.Name));
				result.Append(" AND");
            }
        }
            
		result.Length = result.Length - 3;
		return result.ToString();
    }

	/// <summary>
	/// 是否是自增
	/// </summary>
	private bool GetIsIdentity(EdmMember edmProperty)
    {
		string annotationNamespace = "http://schemas.microsoft.com/ado/2009/02/edm/annotation";
		MetadataProperty storeGeneratedPatternProperty = null;
		edmProperty.MetadataProperties.TryGetValue(annotationNamespace  + ":StoreGeneratedPattern", false, out storeGeneratedPatternProperty);
		return storeGeneratedPatternProperty != null && storeGeneratedPatternProperty.Value.ToString() == "Identity";
    }

	private string GetParamString(EntityType type, CodeGenerationTools code)
	{
		StringBuilder result =  new StringBuilder();
		foreach(var member in type.Members)
        {
			if(!(member.TypeUsage.EdmType is SimpleType))
						continue;
			if(type.KeyMembers.Any(x=>x.Name == GetPropertyName(member.Name)))
            {
				result.AppendFormat("{0} {1}, ", code.GetTypeName(member.TypeUsage.EdmType), GetPropertyName(member.Name));
            }
        }
		result.Length = result.Length - 2;
		return result.ToString();
	}

	private string GetParamValueString(EntityType type, CodeGenerationTools code)
	{
		StringBuilder result =  new StringBuilder();
		foreach(var member in type.Members)
        {
			if(!(member.TypeUsage.EdmType is SimpleType))
						continue;
			if(type.KeyMembers.Any(x=>x.Name == GetPropertyName(member.Name)))
            {
				result.AppendFormat("{0}, ", code.CamelCase(GetPropertyName(member.Name)));
            }
        }
		result.Length = result.Length - 2;
		return result.ToString();
	}
#>
