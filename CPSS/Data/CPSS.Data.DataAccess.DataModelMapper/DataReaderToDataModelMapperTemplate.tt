<#@ template language="C#" debug="false" hostspecific="true"#>
<#@ include file="EF.Utility.CS.ttinclude"#>
<#@ output extension=".cs"#>
<#@ import namespace="System.Collections" #>
<#@ Assembly name="$(TargetDir)CPSS.Data.DataAcess.DataModels.dll" #>
<#
CodeGenerationTools code = new CodeGenerationTools(this);
MetadataLoader loader = new MetadataLoader(this);
CodeRegion region = new CodeRegion(this, 1);
MetadataTools ef = new MetadataTools(this);
string modelFile = @"CPSS.Data.DataAcess.DataModels\CPSSDataEntity.edmx";
string templateDirectory = Path.GetDirectoryName(Host.TemplateFile);
System.IO.DirectoryInfo directory = new System.IO.DirectoryInfo( Path.GetDirectoryName(Host.TemplateFile));
string inputFile = Path.Combine(directory.Parent.FullName, modelFile);
MetadataWorkspace metadataWorkspace = null;
bool allMetadataLoaded =loader.TryLoadAllMetadata(inputFile, out metadataWorkspace);
EdmItemCollection ItemCollection = (EdmItemCollection)metadataWorkspace.GetItemCollection(DataSpace.CSpace);
string namespaceName = code.VsNamespaceSuggestion();
EntityFrameworkTemplateFileManager fileManager = EntityFrameworkTemplateFileManager.Create(this);
Type typeAsssembly=typeof(CPSS.Data.DataAcess.DataModels.User.SigninUserDataModel);
Assembly assembly=typeAsssembly.Assembly;
Type[] customerTypes = assembly.GetTypes();	
foreach (Type type in customerTypes)
{
	string entityName = type.Name;
    if(entityName.ToLower() == "entities") continue;
    fileManager.StartNewFile(entityName + "Mapper.generated.cs");
#>
//------------------------------------------------------------------------------
// <auto-generated>
//     此代码是根据模板生成的。
//
//     对此文件的更改可能会导致不正确的行为，如果
//     重新生成代码，则所做更改将丢失。
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Data;
using System.Collections.Generic;

namespace CPSS.Data.DataAccess
{
	/// <summary>
    /// 手动映射DataReader到<#=entityName#>
    /// </summary>
    public partial class DataReaderTo<#=entityName#>Mapper
    {
		/// <summary>
        /// 映射
        /// </summary>
        /// <param name="dataReader"></param>
        /// <param name="entity"></param>
		public void Map(IDataReader dataReader, <#=type.FullName#> entity)
	    {            
<#
foreach (var property in type.GetProperties())
{
    if(property.PropertyType.ToString().IndexOf("Nullable") >= 0)
    {
#>
            entity.<#=property.Name#> = dataReader.IsDBNull(dataReader.GetOrdinal("<#=property.Name#>"))? null: (<#=GetTypeDisplayString(property.PropertyType)#>)dataReader["<#=property.Name#>"];
<#
	}
	else
	{
#>
            entity.<#=property.Name#> = (<#=GetTypeDisplayString(property.PropertyType)#>)dataReader["<#=property.Name#>"];
<#
	}
}
#>
	    }

		/// <summary>
        /// 映射
        /// </summary>
        /// <param name="dataReader"></param>
        /// <returns></returns>
	    public <#=type.FullName#> Map(IDataReader dataReader)
	    {
			var result = new <#=type.FullName#>();
<#
foreach (var property in type.GetProperties())
{
	if(property.PropertyType.ToString().IndexOf("Nullable") >= 0)
	{
#>
			result.<#=property.Name#> = dataReader.IsDBNull(dataReader.GetOrdinal("<#=property.Name#>"))? null: (<#=GetTypeDisplayString(property.PropertyType)#>)dataReader["<#=property.Name#>"];
<#
	}
	else
	{
#>
            result.<#=property.Name#> = (<#=GetTypeDisplayString(property.PropertyType)#>)dataReader["<#=property.Name#>"];
<#
	}
}
#>
			return result;
	    }

		/// <summary>
        /// 映射
        /// </summary>
        /// <param name="dataReader"></param>
        /// <param name="entity"></param>
		public void MapObject(IDataReader dataReader, object entity)
	    {
	        this.Map(dataReader, entity as <#=type.FullName#>);
	    }

		/// <summary>
        /// 映射
        /// </summary>
        /// <param name="dataReader"></param>
        /// <returns></returns>
	    public object MapObject(IDataReader dataReader)
	    {
	        return this.Map(dataReader);
	    }
	}
}
<#
	fileManager.EndBlock();
}
fileManager.Process();#>
namespace CPSS.Data.DataAccess
{
	using System.Collections.Generic;
    using System.Data;
    using CPSS.Common.Core.DataAccess;

    #region DataReaderMapHelper

	/// <summary>
    /// 映射帮助方法
    /// </summary>
	public static class DataReaderMapHelper
	{
<#
foreach (Type typeitem in customerTypes)
{
        if(typeitem.Name.ToLower() == "entities") continue;
#>	
		/// <summary>
        /// 映射
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="entity"></param>
		public static void Map(IDataReader reader, <#= typeitem.FullName #> entity)
		{
			var mapper = new DataReaderTo<#=typeitem.Name#>Mapper();
			mapper.Map(reader, entity);
		}
<#
}
#>		
	}
    #endregion

    #region DataAccessExecuteReaderExtentions

	/// <summary>
    /// 数据访问层扩展方法
    /// </summary>
	public static class DataAccessExecuteReaderExtentions
    {
<#
foreach (Type typeitem in customerTypes)
{
        if(typeitem.Name.ToLower() == "entities") continue;
#>
		/// <summary>
		/// 执行sql转换到单个实体
		/// </summary>
		public static <#= typeitem.FullName #> ExecuteReadSqlTo<#= typeitem.Name #>(this DataAccessBase dataAccessBase, bool isProc = false)
        {			
            using(var reader = dataAccessBase.QueryGetDataReader(isProc))
			{
				if(reader.Read())
				{
					var result = new <#= typeitem.FullName #>();
					DataReaderMapHelper.Map(reader, result);
					reader.Close();
					dataAccessBase.AfterDataAccessHandler(dataAccessBase.DataParameter);
					return result;
				}
                dataAccessBase.AfterDataAccessHandler(dataAccessBase.DataParameter);
			}
			return null;
        }

		/// <summary>
		/// 执行sql转换到单个实体
		/// </summary>
		public static <#= typeitem.FullName #> ExecuteReadSqlTo<#= typeitem.Name #>(this DataAccessBase dataAccessBase,IDbTransaction trans, bool isProc = false)
        {			
            var reader = dataAccessBase.QueryGetDataReader(trans,isProc);
			<#= typeitem.FullName #> result = null;
			if(reader.Read())
			{
				result = new <#= typeitem.FullName #>();
				DataReaderMapHelper.Map(reader, result);
			}
			reader.Close();
			dataAccessBase.AfterDataAccessHandler(dataAccessBase.DataParameter);
			return result;
        }
		
		/// <summary>
		/// 执行sql转换到实体列表
		/// </summary>
		public static List<<#= typeitem.FullName #>> ExecuteReadSqlTo<#= typeitem.Name #>List(this DataAccessBase dataAccessBase, bool isProc = false)
        {			
			var result = new  List<<#= typeitem.FullName #>>();
            using(var reader = dataAccessBase.QueryGetDataReader(isProc))
			{
				while(reader.Read())
				{
					var entity = new <#= typeitem.FullName #>();
					DataReaderMapHelper.Map(reader, entity);
					result.Add(entity);
				}
				reader.Close();
				dataAccessBase.AfterDataAccessHandler(dataAccessBase.DataParameter);
			}
			return result;
        }
		
		///// <summary>
		///// 执行sql转换翻页数据
		///// </summary>
		//public static PageData<<#= typeitem.FullName #>> ExecuteReadSqlTo<#= typeitem.Name #>PageData(this DataAccessBase dataAccessBase,  string sqlString, int pageIndex, int pageSize, string primaryKey, string pageSort, bool isReturnTotalCount)
        //{			
			//var result = new  PageData<<#= typeitem.FullName #>>();
            //using(var reader = DataAccessHelper.GetPageList(dataAccessBase.Connection, sqlString, pageIndex, pageSize, primaryKey, pageSort, isReturnTotalCount))
			//{
				//var listData = new List<<#= typeitem.FullName #>>();
				//while(reader.Read())
				//{
					//var entity = new <#= typeitem.FullName #>();
					//DataReaderMapHelper.Map(reader, entity);
					//listData.Add(entity);
				//}
				//result.Datas = listData;
				//result.PageIndex = pageIndex;
			    //result.PageSize = pageSize;
				//if (isReturnTotalCount)
                //{
                    //reader.NextResult();
                    //if (reader.Read())
                    //{
                        //result.DataCount = (int) reader[0];
                    //}
                //}
			//}
			//return result;
        //}
<#
}
#>
	}
    #endregion
}

<#+
        private string GetSelectString(Type type)
        {   
            StringBuilder result =  new StringBuilder();
            result.Append("SELECT ");
            foreach(var propertyInfo in type.GetProperties())
            {
                result.Append(propertyInfo.Name);
                result.Append(",");
            }
            result.Length--;
            return result.ToString();
        }

		/// <summary>
        /// 取得 类型 的显示方式.
        /// </summary>
        /// <param name="displayType"></param>
        /// <returns></returns>
        private string GetTypeDisplayString(Type type)
        {
            string tmpResult = null;

            Type[] genericArgumentArray = null;
            try
            {
                genericArgumentArray = type.GetGenericArguments();
            }
            catch (InvalidOperationException)
            {
            }

            if (genericArgumentArray.Length > 0)
            {
                StringBuilder buff = new StringBuilder();

                // 这里取得的预期结果为："System.Collections.Generic.IList`1"
                string baseTypeName = type.FullName;
                int dotIndex = baseTypeName.IndexOf('`');
                buff.Append(baseTypeName.Substring(0, dotIndex));
                buff.Append("<");
                
                for (int i = 0; i < genericArgumentArray.Length; i++)
                {
                    buff.Append(GetTypeDisplayString(genericArgumentArray[i]));
                    buff.Append(',');                    
                }
                if (genericArgumentArray.Length > 0)
                    buff.Length--;//去掉多余的逗号
                buff.Append(">");
                tmpResult = buff.ToString();
            }
            else
            {
                //当参数是 Ref 的时候，FullName后面带一个&
                tmpResult = type.FullName.Replace("&", "");
            }
            // 将常见类型转换为友好的形式，比如Int32转换为int
            return FixCodeStyleLookLike(tmpResult);
        }


        /// <summary>
        /// 调整 数据类型的 显示方式.
        /// </summary>
        /// <param name="oldType"></param>
        /// <returns></returns>
        private string FixCodeStyleLookLike(string oldType) 
        {
            StringBuilder buff = new StringBuilder(oldType);
            buff.Replace("System.Void", "void");
            buff.Replace("System.String", "string");
            buff.Replace("System.Int32", "int");
            buff.Replace("System.Boolean", "bool");
            buff.Replace("System.DateTime", "DateTime");
            buff.Replace("System.Guid", "Guid");
            buff.Replace("System.Int16", "short");
            buff.Replace("System.Int64", "long");
            //调整泛型集合 需要 using System.Collections.Generic
            buff.Replace("System.Collections.Generic.", "");
            // 可空类型
            buff.Replace("System.Nullable<int>", "int?");
            buff.Replace("System.Nullable<DateTime>", "DateTime?");
            buff.Replace("System.Nullable<Guid>", "Guid?");

            // 返回.
            return buff.ToString();
        }
#>

